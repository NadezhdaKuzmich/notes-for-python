Генератори
- Функція-генератор (generator function) - це функція, яка повертає спеціальний
ітератор генератора (generator iterator) (також об'єкт-генератор - generator
object). Вона характеризується наявністю ключового слова yield всередині
функції.
- Термін генератор (generator), залежно від контексту, може означати або
функцію-генератор, або ітератор генератора (найчастіше, останнє).
- Методи __iter__ і __next__ у генераторів створюються автоматично.
- yield заморожує стан функції-генератора і повертає поточне значення. Після
наступного виклику __next__() функція-генератор продовжує своє виконання з того
місця, де вона була призупинена.
- Коли виконання функції-генератори завершується (за допомогою ключового слова
return або досягнення кінця функції), виникає виняток StopIteration.

Вирази-генератори
Деякі прості генератори можуть бути записані у вигляді виразу. Вони виглядають
як вираз, що містить деякі змінні, після якого одне або кілька ключових слів
for, що задають, яких значень мають набувати ці змінні (синтаксис відповідає
заголовку циклу for), і нуль або кілька умов, що фільтрують генеровані значення
(синтаксис відповідає заголовку оператора if). Такі вирази називаються
виразами-генераторами (generator expressions):
function(x, y) for x in range(10) for y in range(5) if x != y

Підгенератори
У Python 3 існують так звані підгенератори (subgenerators). Якщо у
функції-генераторі зустрічається пара ключових слів yield from, після яких
слідує об'єкт-генератор, то цей генератор делегує доступ до підгенератора, поки
він не завершиться (не закінчаться його значення), після чого продовжує своє
виконання:
def generator():
    ...
    yield from subgenerator()
    ...

Yield-вирази
- Насправді yield є виразом. Він може приймати значення, які відправляються в
генератор. Якщо в генератор не надсилаються значення, результат цього виразу
дорівнює None.
- yield from також є виразом. Його результатом є те значення, яке підгенератор
повертає у виключенні StopIteration (для цього значення повертається за
допомогою ключового слова return):
def generator():
    ...
    data = yield
    ...

Методи генераторів:
__next__()
- починає або продовжує виконання функції-генератора. Результат поточного
yield-виразу дорівнюватиме None. Виконання потім триває до наступного
yield-виразу, який передає значення туди, де був викликаний __next__. Якщо
генератор завершується без повернення значення за допомогою yield, виникає
виняток StopIteration. Метод зазвичай викликається неявно, тобто циклом for або
вбудованою функцією next().

send(value)
- продовжує виконання і відправляє значення у функцію-генератор. Аргумент value
стає значенням поточного yield-виразу. Метод send() повертає наступне значення,
повернуте генератором, або викидає виняток StopIteration, якщо генератор
завершується без повернення значення. Якщо send() використовується для запуску
генератора, то єдиним допустимим значенням є None, тому що ще не було виконано
жодного yield-виразу, якому можна присвоїти це значення.

throw(type[, value[, traceback]])
- викидає виняток типу type у місці, де було призупинено генератор, і повертає
наступне значення генератора (або викидає StopIteration). Якщо генератор не
обробляє цей виняток (або викидає інший виняток), то він викидається в місці
виклику.

close()
- викидає виняток GeneratorExit у місці, де було призупинено генератор. Якщо
генератор викидає StopIteration (шляхом нормального завершення або через те, що
він уже закритий) або GeneratorExit (шляхом відсутності обробки цього винятку),
close просто повертається до місця виклику. Якщо ж генератор повертає чергове
значення, викидається виняток RuntimeError. Метод close() нічого не робить,
якщо генератор уже завершено.

Співпрограми
- Співпрограма (англ. coroutine) - компонент програми, що узагальнює поняття
підпрограми, який додатково підтримує безліч вхідних точок (а не одну, як
підпрограма), а також зупинку і продовження виконання зі збереженням певного
положення.
- Розширені можливості генераторів у Python (вирази yield і yield from,
надсилання значень до генераторів) використовуються для реалізації співпрограм.
- Співпрограми корисні для реалізації асинхронних неблокувальних операцій і
кооперативної багатозадачності в одному потоці без використання функцій
зворотного виклику (callback-функцій) і написання асинхронного коду в
синхронному стилі.
- Python 3.5 включає в себе підтримку співпрограм на рівні мови. Для цього
використовуються ключові слова async і await.