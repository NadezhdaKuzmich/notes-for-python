# PEP або Python Enhancement Proposals (пропозиції щодо покращення Python). Різновидів РЕР буває багато і всі вони
# торкаються різних областей мови.

# Перший РЕР8 — це зведення правил, спрямованих на стилістичне оформлення коду (наприклад, довжина рядка не повинна
# перевищувати 100 символів тощо). Такі правила допомагають уніфікувати написання коду серед розробників, оскільки
# ми всі люди і кожен пише по-своєму. Використовуючи РЕР8 можна досягти практично однакового виду коду у всіх
# розробників, що заощадить багато часу для вивчення чужого, а іноді навіть свого коду через час.

# РЕР20 або “Дзен Python” це невеликий набір правил, який відноситься як до стилістичної складової, так і до
# функціональної частини мови.
# 1. Beautiful is better than ugly
# Головна думка - "краще писати красивий і зрозумілий код за прийнятими стандартами, ніж незрозумілий".

# 2. Explicit is better than implicit
# Дослівно - “явне краще за неявне”.
# Головна думка даного правила така: "якщо хочете запрограмувати якийсь алгоритм, зробіть це кількома простими та
# зрозумілими діями, ніж однією купою коду з купою незрозумілих імен змінних та функцій".

# 3. Simple is better than complex
# Дослівно - “просте краще за складне”.
# Головна думка цього правила така: "якщо є можливість спростити ваш код, користуйтеся нею".

# 4. Complex is better than complicated
# Дослівно - "складне краще, ніж заплутане".
# Головна думка цього правила така: "якщо завдання з яким ви працюєте саме по собі складна, то не варто ще й
# заплутувати її вирішення".

# 5. Flat is better than nested
# Дослівно - "плоське краще вкладеного".
# Головна думка цього правила така: "використовуйте розгалуження розумно, не робіть їх по 10 рівнів у глибину,
# пишіть відразу правильні умови".

# 6. Sparse is better than dense
# Дослівно - “розріджене краще за щільне”.
# Головна думка цього правила така: "якщо ваш код виконує безліч різних завдань, то розділіть їх на окремі методи
# з мінімальною відповідальністю, не засовуйте весь код в одну функцію".

# 7. Readability counts
# Дослівно - "читаність (коду) має значення".
# Головна думка даного правила така: "пишіть код, що легко читається і це вам повернеться приємним бонусом у вигляді
# ясного розуміння коду після того як ви не будете ним займатися тривалий час".

# 8. Special cases aren't special enough to break the rules
# Дослівно - “особливі випадки не такі особливі, щоб порушувати правила”.
# Головна думка цього правила така: "якщо вам здається, що саме ваш випадок є винятком із правил, то подумайте двічі
# і зробіть за правилами".

# 9. Although practicality beats purity
# Дослівно - "проте практичність важливіша за правильність".
# Головна думка цього правила така: "але якщо ви вибираєте між дотриманням правил і практичністю, то виберіть
# практичність". Але це тільки в тому випадку, якщо вам дуже потрібна швидкість і ви готові пожертвувати читанням
# коду.

# 10. Errors should never pass silently
# Дослівно - "помилки ніколи не повинні заглушуватися".
# Головна думка цього правила така: "якщо у вашому коді помилка, ламайте програму і виводьте цю помилку в консоль,
# не замовчуйте її".

# 11. Unless explicitly silenced
# Дослівно - "тільки якщо вони не заглушені явно".
# Головна думка цього правила така: "проте ви можете не ламати програму, але помилку все ж таки доведеться оголосити".

# 12. In the face of ambiguity refuse the temptation to guess
# Дослівно - "Перед обличчям двозначності відмовтеся від спокуси вгадати".
# Головна думка цього правила така: "якщо ви не впевнені як працює код, то розбийте його на прості компоненти і
# складіть пазл замість 10 спроб вгадування".

# 13. There should be one --and preferably only one-- obvious way to do it
# Дослівно - "Має бути один і тільки один очевидний спосіб зробити це".
# Головна думка цього правила така: “Python пропонує вам багато гнучкості у рішеннях, але завжди спершу
# фокусуйтеся на проблемі, яку вирішуєте. Для неї найкраще рішення лише одне”.

# 14. Although that way may not be obvious at first unless you’re Dutch
# Дослівно - "Проте цей спосіб може бути не очевидний з першого разу тільки якщо ви не голландець".
# Головна думка цього правила така: "практика, практика і ще раз практика, тоді ви зможете бачити найкращі
# рішення відразу".

# 15. Now is better than never
# Дослівно - “зараз краще ніж ніколи”.
# Головна думка цього правила така: "якщо ви знаєте як покращити щось, то покращуйте!".

# 16. Although never is often better than *right* now
# Дослівно - "проте ніколи часто краще ніж прямо зараз".
# Головна думка цього правила така: "якщо ви хочете щось оптимізувати о 3 годині ночі, то краще поспати і зі свіжою
# головою це переглянути".

# 17. If the implementation is hard to explain, it’s bad idea
# Дослівно - "якщо реалізацію складно пояснити, це погана ідея".
# Головна думка даного правила така: "вчитеся робити прості та ефективні рішення і вчіться їх пояснювати так
# само просто".

# 18. If the implementation is easy to explain, it maybe a good idea
# Дослівно - "якщо реалізацію легко пояснити, можливо, це гарна ідея".
# Головна думка цього правила така: "навіть якщо вам вдалося щось пояснити, то це не запорука успіху, 2+2=5 це просто,
# але неправильно".

# 19. Namespaces are one honking great idea -- let’s do more of those !
# Дослівно - "простори імен це чудова ідея, давайте зробимо ще більше їх!".
# Головна думка цього правила така: "у Python все пов'язано одним великим глобальним простором імен, зрозумійте його
# і вам стане простіше зрозуміти мову".
