Мова Python є мовою динамічної типізації. Ми можемо створювати будь-яку кількість змінних, без зазначення типів.
А визначення типу змінної відбувається під час виконання програми. Даний вид типізації дозволяє дуже швидко
розробляти програми та модулі мовою Python, не переймаючись багатьма особливостями статичної типізації.
Починаючи з версії Python 3, з'являється можливість використовувати інструкцію типів для змінних і параметрів
функцій. А також створювати досить складні типи даних. Для цих цілей у стандартній бібліотеці мови існує бібліотека
typing, що дозволяє комбінувати примітиви у досить складні типи даних (масиви, словники, послідовності, ітератори
із зазначенням типів вмісту, об'єднання типів та багато іншого).

Мова Python не повідомлятиме нам про можливі розбіжності типів. Такий функціонал реалізований сторонніми бібліотеками,
наприклад, mypy. Ця бібліотека встановлюється засобами пакетного менеджера pip та використовується як звичайний
інтепретатор Python. Ми запускаємо python скрипт, використовуючи команду mypy. У разі виникнення помилок або
невідповідностей, mypy згенерує звіт та виведе в консоль повідомлення із зазначенням номерів рядків з помилками.

Використовуючи анотацію типів, ви отримаєте додаткову допомогу при використанні IDE. У разі явної вказівки типів,
IDE автоматично показуватиме можливі помилки або недоліки при використанні змінних. Наприклад, використання невідомих
методів для типу str/int/dict/etc.

Статична типізація
- Однозначність.
- Виняток помилок.
- Корисна у великих проектах.
- Низька швидкість розробки.

Динамічна типізація
- Простота.
- Висока швидкість розробки.
- Універсальність.
- Помилки під час виконання.

Типізація в Python
- Підтримка типізації на рівні підказок (typehints).
- Модуль typing для створення складових типів.
- Реалізація перевірки типів сторонніх пакетів (mypy).
- Типізація на різних версіях Python.
- Підтримка типів IDE.
