# Namespaces - простір імен.
def print_local_y():
    y = 'local'
    print(y)


y = 'global'
print_local_y()
print(y)


def print_namespace():  # імʼя фунції також записується у простір імен
    """ Простір імен це словник з іменами та значеннями.
    Разом з визначенням простору імен Python визначає і область видимості.
    """
    print(1, locals())
    date_founding_kiev = 482
    print(2, locals())
    age = 2023 - 482
    print(3, locals())
    # print(globals())


x = 1
print_namespace()
# print(locals())

# Вкладені функції
# У Python можна оголошувати функції всередині інших функцій. Вони мають
# доступ до змінних та аргументів зовнішньої функції та недоступні за межами
# тих функцій, у яких були визначені.
def external():
    """LEGB enclosed"""
    a = 1

    def internal():
        return a

    return internal()


print(external())
# internal()

# • Область видимості (англ. scope) позначає область програми, в межах якої
# ідентифікатор (ім'я) деякої змінної продовжує бути пов'язаним із цією
# змінною та повертати її значення. За межами області видимості той самий
# ідентифікатор може бути пов'язаний з іншою змінною, або бути вільним (не
# пов'язаним з жодною з них).
# • У мовах, що підтримують структурне програмування, змінні зазвичай
# поділяються на два типи по області видимості:
# • глобальні змінні;
# • локальні змінні.

# Глобальні змінні
# • Глобальні змінні оголошуються поза всіма функціями та доступні звідусіль.
# • Використання глобальних змінних має недоліки:
# глобальна змінна може бути змінена у будь-якій точці програми, що може
# вплинути на роботу інших частин програми. З цієї причини глобальні змінні
# мають необмежений потенціал для створення взаємних залежностей, що призводить
# до ускладнення програми.

# Локальні змінні
# • Локальні змінні оголошуються всередині функції та недоступні зовні.
# • Змінні локальної області видимості використовуються, щоб уникнути проблем
# із побічними ефектами, які можуть статися із глобальними змінними.
# • У Python областю видимості локальної змінної є функція. У деяких мовах
# будь-який блок код може мати свої локальні змінні.
# • Операція присвоєння функції створює локальну змінну. Якщо потрібно змінити
# значення змінною з іншої області видимості, слід скористатися операторами
# Global або nonlocal.

# Область видимості це ланцюжок просторів імен, який починається від
# локального і триває до глобального чи вбудованого. Область видимості
# визначає те, в якому просторі імен Python шукатиме визначення конкретного
# імені конкретної змінної та в якому порядку цеї пошук буде здійснюватись.
# Для пошуку є аривіатура LEGB.

def function():
    # global вказує, що необхідно отримувати доступ до глобальної змінної
    # var, а не створювати нову локальну при спробі щось їй привласнити
    global var
    # виведення значення глобальної змінної на екран
    print(var)
    # Зміна глобальної змінної
    var = 'нове значення'
    # виведення значення глобальної змінної на екран
    print(var)


var = 'глобальна змінна'
function()
print(var)


def function(c, d):
    # a, b - глобальні змінні; c, d - локальні
    global a, b
    # Зміна значення глобальної змінної
    a = 5
    # Зміна значення глобальної змінної
    b = 7
    # створення локальної змінної з тим же ім'ям, що і у глобальної
    c = 10
    # створення локальної змінної з тим же ім'ям, що і у глобальної
    d = 12
    print(f'from func: {a=}, {b=}, {c=}, {d=}')


a, b, c, d = 1, 2, 3, 4  # множинне привласнення
print(a, b, c, d)  # 1 2 3 4
function(c, d)
print(a, b, c, d)  # 5 7 3 4


def outer_function():
    var = 8  # створення локальної змінної var

    def inner_function():
        # вказує, що необхідно використовувати змінну із зовнішньої функції
        nonlocal var
        print(var)  # 8
        var = 10

    print(var)  # 8
    inner_function()  # виклик внутрішньої функції
    print(var)  # 10


# створення глобальної змінної var
var = 0
print(var)  # 0
outer_function()
print(var)  # 0


def changing_product():
    product = 'Milk'  # locals relates to changing_products and enclosed for
    # showing_enclosed
    print('Local: ', product)

    def showing_enclosed():
        # nonlocal product  # я буду змінювати вкладений простір імен
        global product
        print('Inside showing enclosed', product)
        product = 'Cola'
        print('Enclosed scope: ', product)

    showing_enclosed()
    print(product, '----')


product = 'bread'  # Global variables
changing_product()
print('Global:', product)
